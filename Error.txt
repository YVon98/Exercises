	@PostMapping
	public ResponseEntity<?> addStore(@Valid @RequestBody Store store) {
		Optional<Store> store1 = storeService.findStoreDetail(store);
		if (store1.isPresent()) { // exists store
			return ResponseEntity.ok().body("ádasdaas");
		}
		return ResponseEntity.ok().build();
		
	}
	
	********* Response Statuses for Errors       
	
	https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	
	Use appropriate status code based on the error.

		404 - RESOURCE NOT FOUND
		400 - BAD REQUEST
		401 - UNAUTHORIZED
		415 - UNSUPPORTED TYPE - Representation not supported for the resource
		500 - SERVER ERROR
	Let’s consider a few HTTP Methods:

GET : Should not update anything. Should be idempotent (same result in multiple calls). Possible Return Codes 200 (OK) + 404 (NOT FOUND) +400 (BAD REQUEST)
POST : Should create new resource. Ideally return JSON with link to newly created resource. Same return codes as get possible. In addition - Return code 201 (CREATED) can be used.
PUT : Update a known resource. ex: update client details. Possible Return Codes : 200(OK) + 404 (NOT FOUND) +400 (BAD REQUEST)
DELETE : Used to delete a resource. Possible Return Codes : 200(OK).
500 - SERVER ERROR is possible with all the above HTTP methods. In the case of a 500, include the contact details of the help desk in the response.


 ví dụ về bắt lỗi (2 lỗi trong cùng function)  https://zetcode.com/springboot/controlleradvice/
 
 cách bắt lỗi: https://bezkoder.com/spring-boot-restcontrolleradvice/