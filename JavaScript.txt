

	**********video for learning: https://www.youtube.com/watch?v=PkZNo7MFNFg
	
	một số thành phần có cách sử dụng như java: sử dụng // để chú thích, cách khai báo vòng lặp và điều kiện rẽ nhánh if
	In HTML, JavaScript code is inserted between <script> and </script> tags.
	
	
	replace(a,b): thay đổi giá trị của a thành b
	pop(): remove last item
	
		+JavaScript can "display" data in different ways:
	Writing into an HTML element, using innerHTML. //Changing the innerHTML property of an HTML element is a common way to display data in HTML.
	Writing into the HTML output using document.write(). // gUsing document.write() after an HTML document is loaded, will delete all existing HTML, 
		The document.write() method should only be used for testing.
	Writing into an alert box, using window.alert(). // use for sending error
	Writing into the browser console, using console.log().	// use for debugs
	window.print(): print the content of the current window.
	
	+ js nhận diện dấu $ và _ như 1 chữ cái: 2 dấu này đc dùng để đặt tên biến là hợp lệ
	+ let : use in loop    ////https://www.w3schools.com/js/js_let.asp
	+ const similar to let: It does NOT define a constant value. It defines a constant reference to a value.
		Because of this, we cannot change constant primitive values, but we can change the properties of constant objects
		
	+ Common HTML Events
Here is a list of some common HTML events:

Event	Description
onchange	An HTML element has been changed
onclick	The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	The browser has finished loading the page
	
	- Array: []
		+ pop(): xóa phần tử cuối
		+ push(): thêm vào cuối mảng
		+ length: độ dài mảng;
		+ shift(): xóa phần tử đầu tiên
		+ unshift(): thêm vào đầu mảng
		+ slice(a,b) : hiển thị nội dung văn bản từ vị trí thứ a đến vị trí b-1
		+ indexOf(a): tìm vị trí của a
		
	- Object: {}
		+ let spaceship = {
			'Fuel Type' : 'Turbo Fuel',
			homePlanet : 'Earth',
			color: 'silver',
			'Secret Mission' : 'Discover life outside of Earth.'
			};
		thuộc tính	'Fuel Type' đc đặt trong dấu '' bởi vì nó có kí tự đặt biêt (khoảng trắng)
			
	
	- để thêm 1 list đối tượng, cần thực hiện 2 bước
		+ Khai báo list dưới dạng chuỗi,
		+ Convert list về dạng json ( ví dụ: có 1 biến var text ..., obj = JSON.parse(text);)
		
	- Phân biệt chữ in hoa với chữ thường
	- Avoid global variables, avoid "new", avoid "==", avoid "eval()"
	- Không nên dùng "let" để khai báo biến
	(Local variables must be declared with the var keyword or the let keyword, otherwise they will become global variables)
	- Nên giảm thiểu các statement trong vòng lặp để giảm thiểu yếu tố cản trở hiệu suất của vòng lặp
	- Không có ý định lưu kết quả thì không nên tạo biến
	
	
	
	- DOM là cách mà JS giao tiếp với HTML (Document Object Model – tạm dịch Mô hình Các Đối tượng Tài liệu)
	
	- Scope:
		+ Global scope (nằm ngoài block):  Trong phạm vi toàn cục, các biến được khai báo bên ngoài các khối.  Các biến này được 
				gọi là biến toàn cục.  Bởi vì các biến toàn cục không bị ràng buộc bên trong một khối, chúng có thể được truy cập bởi bất kỳ mã nào trong 
				chương trình, kể cả mã trong các khối.
		+ Block scope:
		
		
		
		
		
	- "===" say no with convert data type
	
	
	- Có thể gọi giá trị của biến trong console bằn cách sử dụng: ${}
		tuy nhiên nên nhớ dấu ``. ví dụ: 
										var myName = 'von';
										var myCity = 'hcm';
										console.log(`My name is ${myName}. My favorite city is ${myCity}.`);
	- Điều kiện if rút gọn: 
								ví dụ:
								let defaultName;
								if (username) {
									defaultName = username;
								} else {
									defaultName = 'Stranger';
								}
								sẽ tương tự với:    let defaultName = username || 'Stranger';
							
	- Ternary Operator (toán tử 3 bậc): 
								ví dụ:   isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');
	- Chú ý trong câu điều kiện: so sánh dùng "==="
								ví dụ: 
								let stopLight = 'yellow';
 
								if (stopLight === 'red') {
									console.log('Stop!');
								} else if (stopLight === 'yellow') {
									console.log('Slow down.');
								} else if (stopLight === 'green') {
									console.log('Go!');
								} else {
									console.log('Caution, unknown!');
								}
								
	- Hàm ẩn danh(cách khác để khai báo hàm): 	
								vd: const plantNeedsWater = function(day) {/*các logic đc thực hiện ở đây */};
	
	- Arrow Functions: ví dụ từ hàm ẩn danh trên ta có thể khai báo dưới dạng sau đây:
								const plantNeedsWater =(day) => {/*các logic đc thực hiện ở đây */};
								
	- Hàm mũi tên rút gọn:
	 ví dụ: 	 const plantNeedsWater = (day) => {
					return day === 'Wednesday' ? true : false;
				};
				
				sẽ rút gọn thành:  const plantNeedsWater = day => day === 'Wednesday' ? true : false;
	
	- Iterator:
	
		+ .forEach()
						ví dụ:		const fruits = ['mango', 'papaya', 'pineapple', 'apple'];
									fruits.forEach(fruitsItem => console.log('I want to eat a '+ fruitsItem));
	
		+ .map()
				ví dụ : 	(lấy chữ cái đầu tiên của mỗi phần tử trong mảng)
							
							const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];
							const secretMessage = animals.map(animals=>{
										return animals[0];
							});
							console.log(secretMessage.join(''));
							*Kết quả : HelloWorld 
							
				ví dụ :		(chia mỗi phần tử cho 100)
							const bigNumbers = [100, 200, 300, 400, 500];

							const smallNumbers = bigNumbers.map(bigNumbers=> bigNumbers/100)
							
		+ .filter()
				ví dụ: 	lọc các số nhỏ hơn 250	
							
							const randomNumbers = [375, 200, 3.14, 7, 13, 852];
							const smallNumbers = randomNumbers.filter(number => {
								return number < 250 ;
							});
		+ .findIndex()
		
				ví dụ: tìm vị trí phần tử có giá trị là 'elephant'
				
							const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];
							const foundAnimal = animals.findIndex(name => {
							return name === 'elephant';
							});
							
				ví dụ: tìm vị trí phần tử đầu tiên có chữ cái đầu  là 's' 
							
							const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];
							const startsWithS = animals.findIndex(names => {
							return names[0] === 's';
							});
							
		+ .reduce()
				ví dụ: làm giảm mảng
							const newNumbers = [1, 3, 5, 7];
							const newSum = newNumbers.reduce((accumulator,currentValue) =>{
							console.log('The value of accumulator: ', accumulator);
							console.log('The value of currentValue: ', currentValue);
							return accumulator + currentValue;
							});
							console.log(newSum);
							
						kết quả: 
									The value of accumulator:  1
									The value of currentValue:  3
									The value of accumulator:  4
									The value of currentValue:  5
									The value of accumulator:  9
									The value of currentValue:  7
									16
		+ .some()
				ví dụ: sẽ trả về giá trị boolean
				
							const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];
							console.log(words.some(word => {
								return  word.length < 6;
							}));
							
							* Kết quả: true
		
		
		(	.forEach() is used to execute the same code on every element in an array but does not change the array and returns undefined.
			.map() executes the same code on every element in an array and returns a new array with the updated elements.
			.filter() checks every element in an array to see if it meets certain criteria and returns a new array with the elements that return truthy for the criteria.
			.findIndex() returns the index of the first element of an array which satisfies a condition in the callback function. It returns -1 if none of the elements in the array satisfies the condition.
			.reduce() iterates through an array and takes the values of the elements and returns a single value.
			All iterator methods takes a callback function that can be pre-defined, or a function expression, or an arrow function.
			You can visit the Mozilla Developer Network to learn more about iterator methods (and all other parts of JavaScript!).)
		
	-------tips:
				+ sử dụng const khi biến khai báo là 1 hàm (hàm ẩn danh, hàm mũi tên, hàm rút gọn,..)
				+ sử dụng let khi biến tham gia vào vòng lặp, biến là đối tượng
	
	
	
	
	
	
	
	
	
	